#!/usr/bin/env groovy

node {

  try {
    notifyStarted()
    echo 'Job name : ' + env.JOB_NAME
    
    stage('Checkout') {
	    checkout scm
    }
    
    String appDirectory = 'bioexcel-app-dev'
    String environment = 'DEV'
    
    if(env.JOB_NAME.endsWith("bioexcel-app")){
      environment = 'PROD'
      appDirectory = 'bioexcel-app'
    }
    
    echo 'Build Environment : ' + environment
    // Artifact name
    String archiveName = "${appDirectory}.tgz"
    
    withNodeEnv {
      stage('Build') {
        sh 'npm install'
        sh 'ng build --env=prod --progress=false'
      }
    }

    stage('Archive') {
      sh "touch dist/${archiveName}"
      sh "tar -czf dist/${archiveName} --exclude=${archiveName} -C dist/ ."
      archiveArtifacts artifacts: "**/dist/${archiveName}", fingerprint: true
    }

    stage('Deploy') {
      server = 'centos@192.168.3.23'
      webRoot = "/usr/share/nginx/${appDirectory}/"
      sshagent(credentials: ['ssh-deploy']) {
        sh "ssh -tt ${server} 'sudo rm -rf ${webRoot}*'"
        sh "scp dist/${archiveName} ${server}:~"
        sh "ssh -tt ${server} 'sudo tar -xzf ${archiveName} -C ${webRoot}'"
        sh "ssh -tt ${server} 'sudo chown root.root -R  ${webRoot}*'"
      }
    }

    stage('Cleanup') {
	    sh 'rm -rf dist'
    }

    notifySuccessful()

  } catch (e) {
    currentBuild.result = "FAILED"
    notifyFailed()
    throw e
  }
}

void withNodeEnv(Closure body) {
  String nodeTool = tool name: 'ecp-cloud-portal-app', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'

  // Create environment with NodeJS added to the PATH.
  List nodeEnv = ["PATH+NODE=${nodeTool}/bin", "PATH+NODE_MODULES=./node_modules/.bin"]

  // Invoke the body closure within in the environment with NodeJS added.
  withEnv(nodeEnv) {
    body.call()
  }
}

def notifyStarted() {
  slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}

def notifySuccessful() {
  slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}

def notifyFailed() {
  slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
